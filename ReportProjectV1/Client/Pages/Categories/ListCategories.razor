@using Newtonsoft.Json;
@using ReportProjectV1.Shared.Models
@using ReportProjectV1.Client.Services
@inject IJSRuntime JsRuntime
@inject Blazored.Toast.Services.IToastService ToastService
@inject IGenericServices<Category> CategoryService
@page "/ListCategories"

<div class="jumbtron">
    <h1 class="display-4 text-center">Categories</h1>
</div>
<div class="col-md-12">
    <button type="button" class="btn btn-success" @onclick="@AddCategoryPage">New Category</button>
    <hr />
</div>


<div class="form-group">
    <label for="Search">Search</label>
    <div class="input-group">
        <div class="input-group-prepend">
            <div class="input-group-text bg-white">
                <i class="fas fa-search"></i>
            </div>
        </div>
        <input type="text" class="form-control" placeholder="Search by CategoryName"
               @bind-value="@SearchedValue" @bind-value:event="oninput" @onkeyup="async () => SearchCategory()">
        </input>
    </div>
</div>

@if (Categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-sm table-striped table-bordered m-2">
        <thead>
            <tr>
                <th class="col-lg-2">Category N°</th>
                <th class="col-lg-2">Category CategoryName</th>
               
                <th class="col-lg-2">Options</th>




            </tr>
        </thead>
        <tbody>
            @foreach (Category u in Categories)
            {
                <tr>
                    <td>@u.Id</td>
                    <td>@u.CategoryName</td>
                  
                    <td>
                        <a href="@($"Categoryedit/"+@u.Id)" class="btn btn-light">
                            <i class="fas fa-edit"></i>
                        </a>
                        <a class="btn btn-light" @onclick="() => DeleteCategory(u)">
                            <i class="fas fa-trash-alt"></i>
                        </a>


                    </td>



                </tr>
            }
        </tbody>
    </table>
}


@code
{
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public IEnumerable<Category> Categories { get; set; } = Enumerable.Empty<Category>();

    public IEnumerable<Category> CompleteListCategories { get; set; } = Enumerable.Empty<Category>();

    protected string SearchedValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Categories = await CategoryService.GetAll();
        CompleteListCategories = Categories;
    }
    protected void AddCategoryPage()
    {
        NavigationManager.NavigateTo("/Categoryedit");
    }

    private async Task DeleteCategory(Category u)
    {
        bool confirm = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the Category {u.CategoryName}?");
        if (confirm)
        {
            if (await CategoryService.DeleteAsync(u.Id))
            {
                Categories = await CategoryService.GetAll();
                CompleteListCategories = Categories;
                ToastService.ShowSuccess("Deleted successfully");
                StateHasChanged();
            }
            else
            {
                ToastService.ShowError("Something went wrong while deleting the Category. Please try again.");
            }
        }
    }

    protected void SearchCategory()
    {
        if (!string.IsNullOrEmpty(SearchedValue))
        {
            var searchedValueLowerCase = SearchedValue.ToLower();
            Categories = CompleteListCategories.Where(u => u.CategoryName.ToLower().Contains(searchedValueLowerCase)).ToList();
        }
        else
        {
            Categories = CompleteListCategories;
        }
    }

}

